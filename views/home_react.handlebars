<html>
<head>
    <title>React App Demo</title>
    <script src="https://unpkg.com/react@16/umd/react.development.js"></script>
    <script src="https://unpkg.com/react-dom@16/umd/react-dom.development.js"></script>
    <!-- Don't use this in production: -->
    <script src="https://unpkg.com/babel-standalone@6.15.0/babel.min.js"></script>
</head>

<body>

<div id="root"></div>
<script type="text/babel">

    // Displays database items as an array from which their details can be access
    const GameList = (props) => {
      // Maps the collection to a new array
      const newGamesArray = props.games.map((game) => {
        // Assigns each item's database ID as its key and adds a click handler to identify the clicked item as the "selected item"
        return <li key={game._id}><a href="#" onClick={props.handleClick}>{game.title}</a></li>
      });
      // Returns the new array within a bullet list
      return <ul>{newGamesArray}</ul>
    }

    // Displays details of the selected item and button controls
    const GameDetail = (props) => {
      return (
        <div>
          <h3>Details for {props.selected.title}</h3>
            <form>
              Title: <input type="text" name="title" value={props.selected.title || ""} onChange={props.handleEdit} /><br/>
              Developer: <input type="text" name="developer" value={props.selected.developer || ""} onChange={props.handleEdit} /><br/>
              Genre: <input type="text" name="genre" value={props.selected.genre || ""} onChange={props.handleEdit} /><br/>
              Year: <input type="text" name="year" value={props.selected.year || ""} onChange={props.handleEdit} />
            </form>
            <br/>
            <button onClick={props.resetSelection}>Clear</button>
            <button onClick={props.handleDelete}>Delete</button>
        </div>
      )
    }

    class App extends React.Component {
      constructor(props) {
          super(props);
          // Set initial state using data from server application
          this.state = {
            games: {{{ games }}}, // Database items; the state is the database collection
            currentGame: { } // Current selected item; the state is the selected item
          };
          // Binds application state to click handlers
          this.selectItem = this.selectItem.bind(this);
          this.resetSelection = this.resetSelection.bind(this);
          this.handleEdit = this.handleEdit.bind(this);
          this.handleDelete = this.handleDelete.bind(this);
      }

      handleDelete () {
        console.log(`Deleted ${this.state.currentGame.title}`)
        
        // Retrieves, returns and deletes the current item by its [title]
        fetch(`/api/games/delete/${this.state.currentGame.title}`)
          .then((response) => {
              return response.json();
            })
            .then((result) => {
              console.log(result)

              // Dynamically adjusts the displayed list with the item filtered out whose title matches that of the retrieved item
              this.setState({games: this.state.games.filter(game => game.title !== this.state.currentGame.title) })
              // Resets the item selection
              this.resetSelection();
            })
            .catch(err => console.log(err))
      }

      handleEdit(e) {
        console.log(e.target.value)

        let newGame = this.state.currentGame; // Copies the state of the selected item in a variable
        newGame[e.target.name] = e.target.value; // Edits the state copy (can't be changed itself)
        this.setState({currentGame: newGame}); // Updates state with the edited copy
      }

      // Clears the state of the current selection
      resetSelection() {
        console.log('Form reset')

        this.setState({currentGame: { } });
      }

      // Handle selected item
      selectItem(e) {
        // e.target is the HTML item selected
        e.preventDefault(); // Prevent default behavior
        console.log(e.target.innerText)

        // Retrieves the item from the database matching the [title] text of the item selected
        let selected = this.state.games.find((game) => {
          return game.title === e.target.innerText;
        });
        console.log(selected);
        // Sets currentGame state to the selected game
        this.setState({currentGame: selected});
      }

      // Renders app UI elements
      render() {
        return (
        <div>
          <h2>Indie Games</h2>
            <GameList games={this.state.games} handleClick={this.selectItem} />
          <hr />
            <GameDetail
              selected={this.state.currentGame}
              resetSelection={() => this.resetSelection()}
              handleEdit={this.handleEdit}
              handleDelete={this.handleDelete}
            />
        </div>
        )
      };
    };

    ReactDOM.render(
      <App />,
      document.getElementById('root')
    );
    
</script>
</body>
</html>